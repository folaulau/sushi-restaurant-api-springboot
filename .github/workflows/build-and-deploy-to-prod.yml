name: Build and deploy docker image to (prod) ECR and update ECS task def

on:
  push:
    branches: [main]

env:
  POSTGRESQL_VERSION: 14
  POSTGRESQL_DB: sushi_api_db
  POSTGRESQL_USER: postgres
  POSTGRESQL_PASSWORD: postgres
  spring.profiles.active: github
  JAVA_VERSION: 1.17
  
jobs:
  build-push-image-to-ecr:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:13
        env:
          POSTGRES_DB: ${{ env.POSTGRESQL_DB }}
          POSTGRES_USER: ${{ env.POSTGRESQL_USER }}
          POSTGRES_PASSWORD: ${{ env.POSTGRESQL_PASSWORD }}
        ports:
          - 5432:5432
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5
      elasticsearch:
        image: docker.elastic.co/elasticsearch/elasticsearch:7.17.3
        env:
          xpack.security.enabled: false
          discovery.type: single-node
        ports:
          - 9200:9200
          - 9300:9300
    if: "!contains(github.event.head_commit.message, '--skip-ci')"
    outputs:
      ecr_image: ${{ steps.build-image.outputs.image }}

    steps:
      # set up for java maven build
      - uses: actions/checkout@v2
      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '17'


      - name: Build with maven
        run: |
          mvn -Daws.access.key=${{ secrets.AWS_ACCESS_KEY_ID }} -Daws.secret.key=${{ secrets.AWS_SECRET_ACCESS_KEY }} -Dstripe.secret.key=${{ secrets.STRIPE_SECRET_KEY }} -Dstripe.publishable.key=${{ secrets.STRIPE_PUBLISHABLE_KEY }} -Dfirebase.web.api.key=${{ secrets.DEV_FIREBASE_WEB_API_KEY }} -Dspring.profiles.active=github clean package
        env:
          database.url: postgres://${{ env.POSTGRESQL_USER }}:${{ env.POSTGRESQL_PASSWORD }}@host.docker.internal:5432/${{ env.POSTGRESQL_DB }}
          database.username: ${{ env.POSTGRESQL_USER }}
          database.password: ${{ env.POSTGRESQL_PASSWORD }}
          database.name: ${{ env.POSTGRESQL_DB }}
          aws.access.key: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws.secret.key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          stripe.secret.key: ${{ secrets.STRIPE_SECRET_KEY }}
          stripe.publishable.key: ${{ secrets.STRIPE_PUBLISHABLE_KEY }}
          
      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          mask-aws-account-id: 'no'
          
      - name: Login to Amazon ECR
        id: login-ecr
        uses: aws-actions/amazon-ecr-login@v1

      - name: Build, tag, and push image to Amazon ECR
        id: build-image
        env:
          ECR_REGISTRY: ${{ steps.login-ecr.outputs.registry }}
          ECR_REPOSITORY: pooch-api-dev
        run: |
          IMAGE_TAG=${GITHUB_REF##*/}-$(echo $GITHUB_SHA | cut -c 1-7)          
          docker build -t $ECR_REPOSITORY:$IMAGE_TAG -t $ECR_REPOSITORY:latest .
          docker tag $ECR_REPOSITORY:latest $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:latest
          docker tag $ECR_REPOSITORY:$IMAGE_TAG $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          docker push $ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG
          echo "::set-output name=image::$ECR_REGISTRY/$ECR_REPOSITORY:$IMAGE_TAG"
  deploy-image-to-ecs:
    runs-on: ubuntu-latest
    needs: build-push-image-to-ecr
    environment: dev-env
    if: github.ref == 'refs/heads/development'

    env:
      DEV_ECS_CLUSTER: pocsoft
      DEV_ECS_SERVICE: sushi-api-prod
      CONTAINER_NAME: sushi-api-prod
      TASK_DEFINITION: sushi-api-prod

    # https://github.com/aws-actions/amazon-ecs-deploy-task-definition
    # https://aws.amazon.com/blogs/containers/create-a-ci-cd-pipeline-for-amazon-ecs-with-github-actions-and-aws-codebuild-tests/
    steps:
      - uses: actions/checkout@v2
      - name: Use Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v1
        with:
          aws-access-key-id: ${{ secrets.AWS_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ secrets.AWS_SECRET_ACCESS_KEY }}
          aws-region: us-west-2
          mask-aws-account-id: 'no'

      - name: Download task definition
        run: |
          aws ecs describe-task-definition --task-definition ${{ env.TASK_DEFINITION }} --query taskDefinition > task-definition.json
      
      - name: Fill in the new image ID in the Amazon ECS task definition
        id: task-def
        uses: aws-actions/amazon-ecs-render-task-definition@v1
        with:
          task-definition: task-definition.json
          container-name: ${{ env.CONTAINER_NAME }}
          image: ${{ needs.build-push-image-to-ecr.outputs.ecr_image }}

      - name: Deploy Amazon ECS task definition
        uses: aws-actions/amazon-ecs-deploy-task-definition@v1
        with:
          task-definition: ${{ steps.task-def.outputs.task-definition }}
          service: ${{ env.DEV_ECS_SERVICE }}
          cluster: ${{ env.DEV_ECS_CLUSTER }}
          wait-for-service-stability: true
  apply-hasura-metadata:
    runs-on: ubuntu-latest
    needs: deploy-image-to-ecs
    environment: dev-env
    if: github.ref == 'refs/heads/development'

    steps:
      # set up for java maven build
      - uses: actions/checkout@v2
      - name: Set up Java 17
        uses: actions/setup-java@v2
        with:
          distribution: 'adopt' # See 'Supported distributions' for available options
          java-version: '17'

      - name: Install Hasura CLI
        run: curl -L https://github.com/hasura/graphql-engine/raw/stable/cli/get.sh | bash
  
      - name: Apply Hasura Metadata
        run: |
          hasura metadata clear --endpoint ${{ secrets.DEV_HASURA_ENDPOINT }} --admin-secret ${{ secrets.DEV_HASURA_ADMIN_SECRET }} --project hasura
          hasura metadata apply --endpoint ${{ secrets.DEV_HASURA_ENDPOINT }} --admin-secret ${{ secrets.DEV_HASURA_ADMIN_SECRET }} --project hasura

     